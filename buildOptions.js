const fs = require("fs");
const path = require("path");

/**
 * generate options.js file so it can be referenced on the frontend
 * @param {string} chaptersDir - where to read chapters from
 * @param {string} buildDir - where to put output file
 */
const buildOptions = (chaptersDir = "./chapters", buildDir = "./js") => {
    const chapters = fs.readdirSync(chaptersDir);
    const options = {};

    for (const chapter of chapters) {
        const demos = fs.readdirSync(path.join(chaptersDir, chapter));
        options[chapter] = demos.filter(
            (demo) => demo.endsWith(".js") && demo.includes("_")
        ); // only save .js files and files with a prefix like _
    }

    // write options to options.js
    fs.writeFileSync(
        path.join(buildDir, "options.js"),
        `// do not edit this file, use buildOptions.js
export const options = ${JSON.stringify(options, null, 4)};`
    );

    return options;
};

/**
 * Write options to readme
 * @param {Record<string, string[]>} options - options compiled from buildOptions
 */
const buildReadme = (options) => {
    const readmeFile = "README.md";
    let readmeContents = fs.readFileSync(readmeFile, "utf-8");
    let stringifiedOptions = [];

    const startIdx = readmeContents.indexOf("## Chapters");
    const endIdx = readmeContents.indexOf("## Vanilla Canvas");

    const toUppercase = (title) => {
        return title
            .split(" ")
            .map((word) => `${word.charAt(0).toUpperCase()}${word.slice(1)}`)
            .join(" ");
    };

    const formatHeader = (header) => {
        let [number, ...title] = header.split("_");
        title = toUppercase(title.join(" ")).replace(".js", "");
        return `${number}. ${title}`;
    };

    Object.entries(options).forEach(([header, files], i) => {
        stringifiedOptions.push(formatHeader(header));
        for (const file of files) {
            stringifiedOptions.push(`    ${formatHeader(file)}`);
        }
    });

    readmeContents = `${readmeContents.substring(0, startIdx).trim()}

## Chapters

${stringifiedOptions.join("\n")}

${readmeContents.substring(endIdx).trim()}`;

    fs.writeFileSync(readmeFile, readmeContents);
};

const options = buildOptions();
buildReadme(options);
